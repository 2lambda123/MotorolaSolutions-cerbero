# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

import shutil
from cerbero.utils import shell
from cerbero.utils import messages
from cerbero.utils import parse_file
from custom import generate_gir_h_from_gir

class Recipe(recipe.Recipe):
    name = 'openwebrtc'
    version = '0.0.1'
    stype = SourceType.GIT
    licenses = [License.BSD_like]
    remotes = {
        'origin': 'https://github.com/EricssonResearch/openwebrtc.git',
        'nirbheek': 'https://github.com/nirbheek/openwebrtc.git'
    }
    #commit = 'nirbheek/android_gir_autotools'
    commit = 'origin/master'
    autoreconf = True
    autoreconf_sh = 'mkdir -p m4 && gtkdocize && autoreconf -fiv'
    patches = [name + '/0001-Owr-Use-videoconvert-instead-of-ercolorspace-on-Andr.patch',
               name + '/0002-Fix-build-on-Android-and-iOS-when-not-using-build.sh.patch']
    # Dependencies used in the dynamic (shared) build of OWRTC
    _dynamic_deps = ['libnice', 'gstreamer-1.0', 'gst-plugins-base-1.0',
                     'gst-plugins-good-1.0', 'gst-plugins-bad-1.0',
                     'openwebrtc-gst-plugins']
    # Dependencies used in the static build of OWRTC
    _static_deps = [i + '-static' for i in _dynamic_deps] + \
                   ['openwebrtc-girepository']
    # OpenH264 has been moved to gst-plugins-bad
    deps = ['gettext', 'glib', 'libffi', 'gtk-doc-lite', 'seed', 'json-glib', 'libsoup'] + _dynamic_deps
    platform_deps = {Platform.IOS: _static_deps,
                     Platform.ANDROID: _static_deps}
    # Parallel make fails randomly due to .gitignore generation by git.mk
    allow_parallel_build = False

    files_bins = ['openwebrtc-daemon']
    files_libs = ['libopenwebrtc', 'libopenwebrtc_bridge']
    files_devel = ['lib/pkgconfig/openwebrtc-0.1.pc',
                   'lib/pkgconfig/openwebrtc-bridge-0.1.pc',
                   'include/owr']

    platform_files_typelibs = {
        Platform.DARWIN: ['Owr-0.1'],
        Platform.LINUX: ['Owr-0.1'],
        Platform.WINDOWS: ['Owr-0.1'],
    }

    def prepare(self):
        if self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            self.configure_options += ' --disable-gtk-doc --enable-static \
                --enable-owr-static '
            if self.config.target_platform == Platform.ANDROID:
                if self.config.target_arch == Architecture.ARMv7:
                    self.arch_name = "armeabi-v7a"
                elif self.config.target_arch == Architecture.ARM:
                    self.arch_name = "armeabi"
                elif self.config.target_arch == Architecture.ARM64:
                    self.arch_name = "arm64-v8a"
                elif self.config.target_arch == Architecture.X86:
                    self.arch_name = "x86"
                elif self.config.target_arch == Architecture.X86_64:
                    self.arch_name = "x86_64"
                else:
                    raise FatalError("Unsupported Android architecture: " + \
                        self.config.target_arch)
                android_sdk = os.path.join(self.config.build_tools_prefix,
                                           'opt', 'android-sdk')
                self.configure_options += '--enable-owr-java --enable-shared \
                    --with-android-sdk=' + android_sdk + ' \
                    --with-android-abi=' + self.arch_name + ' \
                    --with-android-ndk=' + self.config.toolchain_prefix

            else:
                self.configure_options += '--disable-shared '

            # TODO: Move all this to the openwebrtc build system
            # We're using internal gir symbols for the static build, but the 
            # build system doesn't add this because it's stupid
            self.new_env['PKG_CONFIG'] = 'pkg-config --static'
            self.append_env['LDFLAGS'] = ' -lgirepository-internals '
            # Since we're linking statically, we need all these plugins at link
            # time. However, the build system is foobar and doesn't add them.
            gst_plugins = ['alaw', 'app', 'audioconvert', 'audioresample',
                'audiotestsrc', 'coreelements', 'erdtls', 'mulaw', 'nice',
                'opengl', 'openh264', 'opus', 'rtp', 'rtpmanager', 'srtp',
                'videocrop', 'videofilter', 'videoparsersbad', 'videorate',
                'videorepair', 'videoscale', 'videotestsrc', 'volume', 'vpx',
                'videoconvert', 'inter']
            if self.config.target_platform == Platform.ANDROID:
                gst_plugins += ['androidvideosrc', 'opensles']
            else:
                gst_plugins += ['applemedia', 'osxaudio']
                if self.config.target_arch in [Architecture.ARMv7, Architecture.ARMv7S]:
                    gst_plugins += ['ercolorspace']
            # Convert the array of plugin names to a string of library names
            libdir = self.config.prefix + '/lib' + self.config.lib_suffix
            gst_plugins_path = '-L' + libdir + '/gstreamer-1.0/static '
            self.gst_plugins_libs = ' '.join(['-lgst' + l for l in gst_plugins])
            # This env variable will get substituted in the Makefile
            self.append_env['OPENWEBRTC_GST_PLUGINS_LIBS'] = \
                gst_plugins_path + self.gst_plugins_libs + ' ' + \
                shell.check_call('$PKG_CONFIG --libs --cflags openssl',
                                 shell=True, split=False).strip()
        elif self.config.target_platform in (Platform.DARWIN, Platform.LINUX):
            self.configure_options += ' --disable-gtk-doc --disable-static \
                --disable-owr-static --enable-shared'
            if self.config.target_platform == Platform.LINUX:
                # Use system libraries for libpulse, libv4l2, and gtk-doc
                self.use_system_libs = True
                self.configure_options += ' --enable-gtk-doc'
        else:
            # Windows?
            pass

    def configure(self):
        shell.replace(os.path.join(self.build_dir, 'Makefile.am'),
                      {'tests ': ''})
        if self.config.target_platform != self.config.platform and \
           self.config.target_platform in (Platform.IOS, Platform.ANDROID):
            if self.config.target_platform == Platform.IOS:
                # On OS X, we use a custom config and install everything inside
                # a framework and not inside the default OS X prefix, so we need
                # to read that from the config file. See:
                # https://github.com/EricssonResearch/openwebrtc/wiki/Building-OpenWebRTC-with-Cerbero
                config = {}
                parse_file(os.path.join(self.config.environ_dir,
                                        "osx-x86-64.cbc"),
                           config)
                host_prefix = config['prefix']
            else:
                host_prefix = os.path.join(self.config.prefix, '..',
                                           '{0}_{1}'.format(self.config.platform,
                                                            self.config.arch))
            err = "You need to build openwebrtc for the host {0} " \
                  "before you can cross-compile it for " \
                  "{1}".format(self.config.platform,
                               self.config.target_platform)
            if not os.path.isdir(host_prefix):
                raise Exception(err)
            # Generate Owr-0.1.gir.h from the Owr-0.1.gir in the host build, 
            # if it exists. If not, error out because that's the only way we 
            # have sorry this is a bad hack kill me please.
            gir_file_path = os.path.join(host_prefix, 'share', 'gir-1.0')
            # This is going to be fun if something causes an exception before
            # we reset the path
            old_cwd = os.getcwd()
            os.chdir(gir_file_path)
            gir_file = 'Owr-0.1.gir'
            gir_h_file = os.path.join(self.build_dir, 'Owr-0.1.gir.h')
            # Generate the gir.h
            generate_gir_h_from_gir(gir_file, gir_h_file)
            if self.config.target_platform == Platform.ANDROID:
                # Copy the gir file as well
                shutil.copy(gir_file, os.path.join(self.build_dir, "bindings", "java"))
            os.chdir(old_cwd)
        super(Recipe, self).configure()
        if self.config.target_platform == Platform.IOS:
            # Ensure that libtool doesn't discard the symbols exported by
            # libraries that are -weak_framework
            shell.apply_patch(os.path.join(self.build_dir, 'libtool.diff'),
                              self.build_dir, 0)

    def post_install(self):
        # On Android, we want a 'fat' library that contains all the dependencies
        # not provided by the system within itself using static libraries.
        # However, libtool gives us no way to generate that, so we use the
        # 'libtool-link' command inside data/ndk-build/tools.mk to generate a 
        # linker command that does that for us, re-create the library, and then
        # add it to the JAR file
        if self.config.target_platform == Platform.ANDROID:
            import tempfile
            make_cmd = 'make -f "{0}" INPUT_LIBRARY="{1}" OUTPUT_LIBRARY="{2}" ' \
                       'CERBERO_DATA_PATH="{3}" PREFIX="{4}" ' \
                       'GSTREAMER_STATIC_PLUGINS="{5}"'
            makefile = os.path.join(self.config.recipes_dir, self.name,
                                    'Makefile.bundled-shared')
            for each in ('openwebrtc', 'openwebrtc_bridge'):
                input_library = each + '_jni'
                jar_lib = 'lib' + input_library + '.so'
                output_library_dir = os.path.join(self.config.prefix,
                                                  'lib' + self.config.lib_suffix)
                output_library_dir = os.path.realpath(output_library_dir)
                output_library = os.path.join(output_library_dir, jar_lib)
                gst_plugins_libs = self.gst_plugins_libs
                if each == 'openwebrtc_bridge':
                    # FIXME: For some reason, this is missing from
                    # libopenwebrtc_bridge.la, so we add it manually here.
                    # This needs to be fixed in the la file.
                    gst_plugins_libs += ' -lseed-gtk3'
                cmd = make_cmd.format(makefile, input_library, output_library,
                                      self.config.data_dir,
                                      self.config.prefix,
                                      gst_plugins_libs)
                shell.call(cmd)
                # We need to repackage the jar file with the fixed library
                jar_file = os.path.join(self.config.prefix,
                                        'lib' + self.config.lib_suffix,
                                        'jni', each + '.jar')
                # The library needs to be inside 'lib/armeabi' etc (depending
                # on the architecture, so we need to copy it inside that dir,
                # add it to the jar and then delete the tmpdir
                tempdir = tempfile.mkdtemp()
                # Extract the jar file in the tmpdir
                old_cwd = os.getcwd()
                os.chdir(tempdir)
                shell.call("jar -xvf " + jar_file)
                # Remove all existing native libraries inside the jar
                shutil.rmtree("lib")
                jar_lib_path = os.path.join("lib", self.arch_name)
                os.makedirs(jar_lib_path)
                # Copy the fixed native library into the correct path
                shutil.copy(output_library, jar_lib_path)
                os.chdir(old_cwd)
                # Re-create the jar file
                shell.call("jar -cvf {0} -C {1} .".format(jar_file, tempdir))
                shutil.rmtree(tempdir)
